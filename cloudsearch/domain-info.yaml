# This configuration file is meant to be read by the provision-domain.py script
# and is used to set up a CloudSearch domain. See that script for more
# information on the provisioning process.
# Also see
# https://sites.google.com/a/khanacademy.org/forge/for-developers/developing-search/working-with-cloudsearch-domains

analysis_schemes:
    # These are the analysis schemes we use. Creating and using analysis
    # schemes is how we configure CloudSearch features such as algorithmic
    # stemming, dictionary stemming, stop words, and a few others. See the
    # Configuring Text Analysis Schemes for Amazon CloudSearch document in
    # AWS CloudSearch's documentation for more information.

    - AnalysisSchemeName: ka_bulgarian
      AnalysisSchemeLanguage: bg
      AnalysisOptions:
        AlgorithmicStemming: light
        Stopwords: dictionaries/bg-stopwords.yaml

    - AnalysisSchemeName: ka_danish
      AnalysisSchemeLanguage: da
      AnalysisOptions:
        AlgorithmicStemming: full
        Stopwords: dictionaries/da-stopwords.yaml

    - AnalysisSchemeName: ka_english
      AnalysisSchemeLanguage: en
      AnalysisOptions:
        AlgorithmicStemming: full
        Stopwords: dictionaries/en-stopwords.yaml

    - AnalysisSchemeName: ka_french
      AnalysisSchemeLanguage: fr
      AnalysisOptions:
        AlgorithmicStemming: light
        Stopwords: dictionaries/fr-stopwords.yaml

    - AnalysisSchemeName: ka_hebrew
      AnalysisSchemeLanguage: he
      AnalysisOptions:
        AlgorithmicStemming: full
        Stopwords: dictionaries/he-stopwords.yaml

    - AnalysisSchemeName: ka_portuguese
      AnalysisSchemeLanguage: pt
      AnalysisOptions:
        AlgorithmicStemming: light
        Stopwords: dictionaries/pt-stopwords.yaml

    - AnalysisSchemeName: ka_spanish
      AnalysisSchemeLanguage: es
      AnalysisOptions:
        AlgorithmicStemming: light
        Stopwords: dictionaries/es-stopwords.yaml

    - AnalysisSchemeName: ka_turkish
      AnalysisSchemeLanguage: tr
      AnalysisOptions:
        AlgorithmicStemming: full
        Stopwords: dictionaries/tr-stopwords.yaml

fields:
    # These are the fields that documents in the index will contain. Possible
    # traits are: search, highlight, sort, return, and facet. If an
    # analysis_scheme is specified, the scheme with that name will be applied
    # to the field. If the special locale_specific scheme is specified, a
    # field will be created for every locale (content_en, content_es_es, ...)
    # and the analysis_scheme specified in locales dict below will be applied
    # to the field.
    #
    # Some useful information regarding indexing options are available under
    # Configuring Index Options in AWS Cloud Search's documentation.

    - name: title
      type: text
      traits: [search, return, sort, highlight]
      analysis_scheme: locale_specific

    # A relative URL (ie: what's after 'http://khanacademy.org') to the entity
    - name: relative_url
      type: literal
      traits: [return]

    # This field contains the description of the entity which might not exist
    # (in which case it is omitted). For example, this field is omitted for
    # articles.
    - name: description
      type: text
      traits: [search, highlight]
      analysis_scheme: locale_specific

    # This field contains the "content" of the entity. For an article, this is
    # literally its content (stripped of HTML tags), but for a video it is the
    # subtitles of the video, this will be omitted for topics.
    - name: content
      type: text-array
      traits: [search, highlight]
      analysis_scheme: locale_specific

    # This field is only specified for videos.
    - name: keywords
      type: text-array
      traits: [search, return, highlight]
      analysis_scheme: ka_english

    # This field will contain one of: Video, Article, Program, Exercise, or
    # Topic.
    - name: kind
      type: literal
      traits: [search, facet, return]

    # A coded, numerical value of the kind so it can be used in ranking
    # expressions. The mapping of kind to kind_ordinal should be stable and
    # specified in the main repository's search/server.py
    - name: kind_ordinal
      type: int
      traits: [sort]

    # Example value: ["Test prep", "GMAT"]
    - name: breadcrumbs
      type: literal-array
      traits: [return]

    # This is a hash of all of the search data used when updating the search
    # index. It should not be used outside of the publish process.
    - name: hash
      type: literal
      traits: [return]

    # This field is 1 if the content is core (not test prep or partner content)
    - name: is_core_content
      type: int
      traits: [sort]

    # This field stores a list of the curricula that this content is a part of
    # (for example, ['us-cc', 'fr-fr']). The default is ['None'] (not the empty
    # list).
    - name: curriculum_keys
      type: literal-array
      traits: [search, facet, return]

    # This field indicates when the content was created.
    - name: date_added
      type: date
      traits: [return, sort]

    - name: popularity
      type: int
      traits: [sort, return]

locales:
    # Maps the locale name (with any non-alphanumeric character transformed
    # into an underscore and all alphabetic characters converted to lowercase)
    # to the analysis scheme we'll use for it.  The locales are the
    # locale_for_mo (same as ka_locale, expect he), and need to match what is
    # at the top of search/server.py:INDEXED_LOCALES

    bg: ka_bulgarian
    da: ka_danish
    en: ka_english
    fr: ka_french
    he: ka_hebrew
    pt: ka_portuguese
    es: ka_spanish
    tr: ka_turkish

